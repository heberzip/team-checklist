version: '3'

vars:
  PROJECT: teamchecklist
  TRAEFIK_COMPOSE: compose/traefik.yml
  DB_COMPOSE: compose/db.yml
  API_COMPOSE: compose/api.yml
  FRONT_COMPOSE: compose/frontend.yml


# --- STACK - GLOBAL TASKS ---
tasks:
  net:init:
    desc: "CREATE REQUIRED EXTERNAL NETWORKS"
    cmds:
      - bash -lc 'docker network inspect web >/dev/null 2>&1 || docker network create web'
      - bash -lc 'docker network inspect backend >/dev/null 2>&1 || docker network create backend'


  up:
    desc: "BUILD UP TRAEFIK + DB + API + FRONTEND"
    deps: [ net:init ]
    cmds:
      - >
        docker compose -p {{.PROJECT}}
        -f {{.TRAEFIK_COMPOSE}}
        -f {{.DB_COMPOSE}}
        -f {{.API_COMPOSE}}
        -f {{.FRONT_COMPOSE}}
        up -d --remove-orphans
      - echo "FRONT → http://chl.front.local"
      - echo "API   → http://chl.api.local"
      - echo "PROXY → http://traefik.local  > PORT:8080"

  down:
    desc: "SHUT DOWN ALL"
    cmds:
      - >
        docker compose -p {{.PROJECT}}
        -f {{.TRAEFIK_COMPOSE}}
        -f {{.DB_COMPOSE}}
        -f {{.API_COMPOSE}}
        -f {{.FRONT_COMPOSE}}
        down

  logs:
    desc: "COMBINED LOGS"
    cmds:
      - >
        docker compose -p {{.PROJECT}}
        -f {{.TRAEFIK_COMPOSE}}
        -f {{.DB_COMPOSE}}
        -f {{.API_COMPOSE}}
        -f {{.FRONT_COMPOSE}}
        logs -f --tail=100

  rebuild:
    desc: "REBUILD API + FRONTEND"
    cmds:
      - >
        docker compose -p {{.PROJECT}}
        -f {{.TRAEFIK_COMPOSE}}
        -f {{.DB_COMPOSE}}
        -f {{.API_COMPOSE}}
        -f {{.FRONT_COMPOSE}}
        build --no-cache api front
      - task: up

  ps:
    desc: "FULL STACK STATE"
    cmds:
      - >
        docker compose -p {{.PROJECT}}
        -f {{.TRAEFIK_COMPOSE}}
        -f {{.DB_COMPOSE}}
        -f {{.API_COMPOSE}}
        -f {{.FRONT_COMPOSE}}
        ps

  db:reseed:
    desc: "RECREATE JUST POSTGRE AND RESEED THE DB"
    cmds:
      - >
        docker compose -p {{.PROJECT}}
        -f {{.DB_COMPOSE}}
        down -v
      - >
        docker compose -p {{.PROJECT}}
        -f {{.DB_COMPOSE}}
        up -d db
      - echo "POSTGRE CLEANED UP AND SEED APPLIED"

  # --- SPECIFIC TASKS ---
  proxy:up:
    desc: "MONT TRAEFIK (REVERSE PROXY) IN WEB NETWORK"
    cmds:
      - docker compose -p {{.PROJECT}} -f {{.TRAEFIK_COMPOSE}} up -d

  proxy:down:
    desc: "STOP TRAEFIK"
    cmds:
      - docker compose -p {{.PROJECT}} -f {{.TRAEFIK_COMPOSE}} down

  hosts:print:
    desc: "SHOW THE LINES THAT NEED TO BE ADD TO ETC/HOSTS"
    cmds:
      - echo "ADD THESE LINES TO /etc/hosts:"
      - echo "127.0.0.1  traefik.local chl.front.local chl.api.local"

  front:build:
    desc: "Build de la imagen del frontend (dev)"
    cmds:
      - env PWD={{.ROOT}} docker compose -p {{.PROJECT}} -f {{.TRAEFIK_COMPOSE}} -f {{.FRONT_COMPOSE}} build front

  front:up:
    desc: "Levanta el frontend con hot-reload"
    deps: [ proxy:up ]
    cmds:
      - env PWD={{.ROOT}} docker compose -p {{.PROJECT}} -f {{.TRAEFIK_COMPOSE}} -f {{.FRONT_COMPOSE}} up -d front
      - echo "Abre http://chl.front.local"

  front:logs:
    desc: "Logs del frontend"
    cmds:
      - env PWD={{.ROOT}} docker compose -p {{.PROJECT}} -f {{.TRAEFIK_COMPOSE}} -f {{.FRONT_COMPOSE}} logs -f front

  front:down:
    desc: "Detiene el frontend"
    cmds:
      - env PWD={{.ROOT}} docker compose -p {{.PROJECT}} -f {{.TRAEFIK_COMPOSE}} -f {{.FRONT_COMPOSE}} down


  db:up:
    desc: "Levanta Postgres para dev"
    cmds:
      - env PWD={{.ROOT}} docker compose -p {{.PROJECT}} -f {{.TRAEFIK_COMPOSE}} -f {{.DB_COMPOSE}} up -d db

  db:down:
    desc: "Apaga Postgres (y mantiene volumen)"
    cmds:
      - env PWD={{.ROOT}} docker compose -p {{.PROJECT}} -f {{.TRAEFIK_COMPOSE}} -f {{.DB_COMPOSE}} down

  api:build:
    desc: "Build de la imagen de la API (dev)"
    cmds:
      - env PWD={{.ROOT}} docker compose -p {{.PROJECT}} -f {{.TRAEFIK_COMPOSE}} -f {{.DB_COMPOSE}} -f {{.API_COMPOSE}} build api

  api:up:
    desc: "Levanta la API (hot-restart) y la DB si hace falta"
    deps: [ proxy:up ]
    cmds:
      - env PWD={{.ROOT}} docker compose -p {{.PROJECT}} -f {{.TRAEFIK_COMPOSE}} -f {{.DB_COMPOSE}} -f {{.API_COMPOSE}} up -d db api
      - echo "API → http://chl.api.local"

  api:logs:
    desc: "Logs de la API"
    cmds:
      - env PWD={{.ROOT}} docker compose -p {{.PROJECT}} -f {{.TRAEFIK_COMPOSE}} -f {{.DB_COMPOSE}} -f {{.API_COMPOSE}} logs -f api

  api:down:
    desc: "Detiene la API (DB queda viva si la usan más servicios)"
    cmds:
      - env PWD={{.ROOT}} docker compose -p {{.PROJECT}} -f {{.TRAEFIK_COMPOSE}} -f {{.DB_COMPOSE}} -f {{.API_COMPOSE}} stop api
